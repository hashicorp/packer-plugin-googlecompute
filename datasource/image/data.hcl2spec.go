// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package image

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	ProjectID       *string           `mapstructure:"project_id" cty:"project_id" hcl:"project_id"`
	Filters         *string           `mapstructure:"filters" cty:"filters" hcl:"filters"`
	MostRecent      *bool             `mapstructure:"most_recent" cty:"most_recent" hcl:"most_recent"`
	UniverseDomain  *string           `mapstructure:"universe_domain" cty:"universe_domain" hcl:"universe_domain"`
	CustomEndpoints map[string]string `mapstructure:"custom_endpoints" cty:"custom_endpoints" hcl:"custom_endpoints"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"project_id":       &hcldec.AttrSpec{Name: "project_id", Type: cty.String, Required: false},
		"filters":          &hcldec.AttrSpec{Name: "filters", Type: cty.String, Required: false},
		"most_recent":      &hcldec.AttrSpec{Name: "most_recent", Type: cty.Bool, Required: false},
		"universe_domain":  &hcldec.AttrSpec{Name: "universe_domain", Type: cty.String, Required: false},
		"custom_endpoints": &hcldec.AttrSpec{Name: "custom_endpoints", Type: cty.Map(cty.String), Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	ID           *string           `mapstructure:"id" cty:"id" hcl:"id"`
	Name         *string           `mapstructure:"name" cty:"name" hcl:"name"`
	CreationDate *string           `mapstructure:"creation_date" cty:"creation_date" hcl:"creation_date"`
	Labels       map[string]string `mapstructure:"labels" cty:"labels" hcl:"labels"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"id":            &hcldec.AttrSpec{Name: "id", Type: cty.String, Required: false},
		"name":          &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"creation_date": &hcldec.AttrSpec{Name: "creation_date", Type: cty.String, Required: false},
		"labels":        &hcldec.AttrSpec{Name: "labels", Type: cty.Map(cty.String), Required: false},
	}
	return s
}
